name: Demo GIFs

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      commit_updates:
        description: 'Commit updates back to branch?'
        required: false
        default: 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-demo-gif
  cancel-in-progress: ${{ !startsWith(github.head_ref, 'release-please-') }}

jobs:
  check-skip:
    name: 'Check if should skip'
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check.outputs.should_skip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if we should skip demo generation
        id: check
        env:
          PR_HEAD_REF: ${{ github.head_ref }}
        run: |
          echo "üîç Checking if we should skip demo generation..."
          echo ""

          # Comprehensive GitHub context debugging
          echo "üêõ COMPREHENSIVE GITHUB CONTEXT DEBUG:"
          echo "  === Basic Event Info ==="
          echo "  github.event_name: '${{ github.event_name }}'"
          echo "  github.head_ref: '${{ github.head_ref }}'"
          echo "  github.ref: '${{ github.ref }}'"
          echo "  github.ref_name: '${{ github.ref_name }}'"
          echo "  github.sha: '${{ github.sha }}'"
          echo ""

          echo "  === PR Head Commit Context ==="
          echo "  github.event.pull_request.head.sha: '${{ github.event.pull_request.head.sha }}'"
          echo "  github.event.pull_request.head.commit.author.name: '${{ github.event.pull_request.head.commit.author.name }}'"
          echo "  github.event.pull_request.head.commit.author.email: '${{ github.event.pull_request.head.commit.author.email }}'"
          echo "  github.event.pull_request.head.commit.author.date: '${{ github.event.pull_request.head.commit.author.date }}'"
          echo "  github.event.pull_request.head.commit.committer.name: '${{ github.event.pull_request.head.commit.committer.name }}'"
          echo "  github.event.pull_request.head.commit.committer.email: '${{ github.event.pull_request.head.commit.committer.email }}'"
          echo "  github.event.pull_request.head.commit.committer.date: '${{ github.event.pull_request.head.commit.committer.date }}'"
          echo "  github.event.pull_request.head.commit.message: '${{ github.event.pull_request.head.commit.message }}'"
          echo "  github.event.pull_request.head.commit.tree.sha: '${{ github.event.pull_request.head.commit.tree.sha }}'"
          echo "  github.event.pull_request.head.commit.url: '${{ github.event.pull_request.head.commit.url }}'"
          echo ""

          echo "  === Actor & Triggering User Info ==="
          echo "  github.actor: '${{ github.actor }}'"
          echo "  github.triggering_actor: '${{ github.triggering_actor }}'"
          echo "  github.event.sender.login: '${{ github.event.sender.login }}'"
          echo "  github.event.sender.type: '${{ github.event.sender.type }}'"
          echo ""

          echo "  === Git Commit Info (from actual git) ==="
          echo "  git log -1 --format='%H' (commit hash): '$(git log -1 --format='%H')'"
          echo "  git log -1 --format='%an' (author name): '$(git log -1 --format='%an')'"
          echo "  git log -1 --format='%ae' (author email): '$(git log -1 --format='%ae')'"
          echo "  git log -1 --format='%ad' (author date): '$(git log -1 --format='%ad')'"
          echo "  git log -1 --format='%cn' (committer name): '$(git log -1 --format='%cn')'"
          echo "  git log -1 --format='%ce' (committer email): '$(git log -1 --format='%ce')'"
          echo "  git log -1 --format='%cd' (committer date): '$(git log -1 --format='%cd')'"
          echo "  git log -1 --format='%s' (subject): '$(git log -1 --format='%s')'"
          echo ""

          # For non-release-please PRs, never skip
          if [[ ! "$PR_HEAD_REF" =~ ^release-please- ]]; then
            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Regular PR - proceeding with demo generation"
            exit 0
          fi

          # For release-please PRs, check actual git committer
          COMMITTER_NAME=$(git show -s --format='%cn' HEAD)
          echo "üîç Release-please PR - checking committer: '$COMMITTER_NAME'"

          if [ "$COMMITTER_NAME" = "demo-generation-bot" ]; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "üö´ Skipping: This commit was made by demo-generation-bot"
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Original release-please commit - proceeding"
          fi

  generate-demos:
    name: 'Generate'
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.should_skip != 'true'
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug GitHub context and determine release-please context
        id: context
        env:
          PR_HEAD_REF: ${{ github.head_ref }}
        run: |
          # Debug: dump GitHub context to understand what's available
          echo "üêõ DEBUG: GitHub Event Context"
          echo "  github.event_name: ${{ github.event_name }}"
          echo "  github.head_ref: ${{ github.head_ref }}"
          echo "  github.event.pull_request.head.sha: ${{ github.event.pull_request.head.sha }}"
          echo "  github.event.pull_request.head.commit.author.name: ${{ github.event.pull_request.head.commit.author.name }}"
          echo "  github.event.pull_request.head.commit.committer.name: ${{ github.event.pull_request.head.commit.committer.name }}"
          echo "  github.event.pull_request.head.commit.message: ${{ github.event.pull_request.head.commit.message }}"
          echo ""

          # Since we only run on PRs now, we can simplify
          echo "is_pr=true" >> $GITHUB_OUTPUT

          # Check if this is a release-please PR by looking at the branch name
          if [[ "$PR_HEAD_REF" =~ ^release-please- ]]; then
            echo "is_release_please=true" >> $GITHUB_OUTPUT
            echo "üîç Release-please PR detected: $PR_HEAD_REF"
            
            # For release-please PRs, check the actual git commit to see if we should skip
            COMMITTER_NAME=$(git show -s --format='%cn' HEAD)
            echo "üîç Actual git committer name: '$COMMITTER_NAME'"
            
            if [ "$COMMITTER_NAME" = "demo-generation-bot" ]; then
              echo "should_skip=true" >> $GITHUB_OUTPUT
              echo "üö´ Skipping: This commit was made by demo-generation-bot"
            else
              echo "should_skip=false" >> $GITHUB_OUTPUT
              echo "‚úÖ Proceeding: This is an original release-please commit"
            fi
          else
            echo "is_release_please=false" >> $GITHUB_OUTPUT
            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo "üîç Regular PR detected: $PR_HEAD_REF"
          fi

      - name: Generate all demo GIFs
        run: |
          # Set deterministic timestamp for consistent builds
          export SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)

          # Generate all demos
          echo "üé¨ Generating all demos..."
          npm run demo:generate:all

      - name: Upload demo artifacts (always upload regardless of changes)
        uses: actions/upload-artifact@v4
        with:
          name: demo-gifs-${{ github.run_id }}
          path: docs/img/*.gif
          retention-days: 30

      - name: Upload all demos to orphan branch and prepare preview
        if: steps.context.outputs.is_pr == 'true'
        id: demo_preview
        env:
          PR_HEAD_REF: ${{ github.head_ref || github.ref_name }}
        run: |
          # For PRs, use the actual PR head commit, not the merge commit
          PR_HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Debug: Show SHA values being used
          echo "üîç SHA Debug Information:"
          echo "  - github.sha (merge commit): ${{ github.sha }}"
          echo "  - PR head SHA (user commit): $PR_HEAD_SHA"
          echo "  - Are they different? $([ "${{ github.sha }}" != "$PR_HEAD_SHA" ] && echo "YES ‚úÖ" || echo "NO ‚ùå")"

          # Call upload script and capture structured output
          UPLOAD_OUTPUT=$(.github/workflows/scripts/upload-demo-images.sh \
            --pr-number="${{ github.event.pull_request.number }}" \
            --commit-sha="$PR_HEAD_SHA" \
            --repository="${{ github.repository }}" \
            --head-ref="$PR_HEAD_REF")

          # Parse structured output
          USER_COMMIT_SHA=$(echo "$UPLOAD_OUTPUT" | grep "^USER_COMMIT_SHA=" | cut -d'=' -f2)
          DEMO_IMAGES=$(echo "$UPLOAD_OUTPUT" | grep "^DEMO_IMAGES=" | cut -d'=' -f2-)

          # Store outputs for downstream steps
          echo "demo_images<<EOF" >> $GITHUB_OUTPUT
          echo "$DEMO_IMAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "user_commit_sha=$USER_COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Check which demos changed (using git)
        id: check_changes
        env:
          IS_RELEASE_PLEASE: ${{ steps.context.outputs.is_release_please }}
        run: |
          # Ensure we have the latest main branch for comparison
          git fetch origin main:main || true

          # For release-please PRs, compare to previous commit; for feature branches, compare to main
          if [ "$IS_RELEASE_PLEASE" = "true" ]; then
            echo "üîç Release-please PR: comparing to previous commit (HEAD~1)"
            DETECTION_OUTPUT=$(.github/workflows/scripts/detect-demo-changes.sh --verbose --compare-to=HEAD~1)
          else
            echo "üîç Feature branch PR: comparing to main branch"
            DETECTION_OUTPUT=$(.github/workflows/scripts/detect-demo-changes.sh --verbose)
          fi

          # Extract values from the output
          CHANGED_DEMOS=$(echo "$DETECTION_OUTPUT" | grep "CHANGED_DEMOS=" | cut -d"'" -f2)
          NEW_DEMOS=$(echo "$DETECTION_OUTPUT" | grep "NEW_DEMOS=" | cut -d"'" -f2)

          # Compute demo_changed from the lists (true if either list is non-empty)
          if [ -n "$CHANGED_DEMOS" ] || [ -n "$NEW_DEMOS" ]; then
            DEMO_CHANGED="true"
          else
            DEMO_CHANGED="false"
          fi

          # Set GitHub Action outputs
          echo "changed_demos=$CHANGED_DEMOS" >> $GITHUB_OUTPUT
          echo "new_demos=$NEW_DEMOS" >> $GITHUB_OUTPUT
          echo "demo_changed=$DEMO_CHANGED" >> $GITHUB_OUTPUT

      - name: Amend release-please PR with demo changes
        if: steps.context.outputs.is_release_please == 'true' && steps.context.outputs.is_pr == 'true' && steps.check_changes.outputs.demo_changed == 'true'
        env:
          PR_HEAD_REF: ${{ github.head_ref || github.ref_name }}
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          echo "üîÑ Amending release-please PR with updated demo GIFs..."

          # Configure git with distinctive identity for demo commits to enable loop detection
          # Use --local to override any global/system config that might interfere
          git config --local user.name "demo-generation-bot"
          git config --local user.email "demo-generation-bot@users.noreply.github.com"

          # Switch to the PR branch
          git checkout "$PR_HEAD_REF"

          # Add the demo files
          git add docs/img/*.gif

          # Amend the existing commit (this will change the committer date for detection)
          git commit --amend --no-edit --no-gpg-sign

          # Force push using the app token
          git push --force-with-lease origin "$PR_HEAD_REF"

          echo "‚úÖ Successfully amended release-please PR with demo updates"

      - name: Find existing demo comment
        if: steps.context.outputs.is_pr == 'true'
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'Demo Previews'

      - name: Generate demo preview comment
        if: steps.context.outputs.is_pr == 'true'
        id: generate_comment
        env:
          DEBUG: 'true'
        run: |
          # Debug: Show variables for comment generation
          echo "üîç Comment Generation Debug:"
          echo "  - GITHUB_SHA (merge commit): ${{ github.sha }}"
          echo "  - USER_COMMIT_SHA (user commit): ${{ steps.demo_preview.outputs.user_commit_sha }}"
          echo "  - Are they different? $([ "${{ github.sha }}" != "${{ steps.demo_preview.outputs.user_commit_sha }}" ] && echo "YES ‚úÖ" || echo "NO ‚ùå")"
          echo "  - NEW_DEMOS: '${{ steps.check_changes.outputs.new_demos }}'"
          echo "  - CHANGED_DEMOS: '${{ steps.check_changes.outputs.changed_demos }}'"

          # Generate comment using template with flags
          COMMENT_BODY=$(.github/workflows/scripts/generate-demo-comment.sh \
            --template-file=.github/workflows/scripts/templates/demo-comment.md \
            --github-repository="${{ github.repository }}" \
            --github-sha="${{ github.sha }}" \
            --user-commit-sha="${{ steps.demo_preview.outputs.user_commit_sha }}" \
            --demo-images="${{ steps.demo_preview.outputs.demo_images }}" \
            --changed-demos="${{ steps.check_changes.outputs.changed_demos }}" \
            --new-demos="${{ steps.check_changes.outputs.new_demos }}")

          # Save comment body to output using heredoc
          echo "comment_body<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENT_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post/update demo preview comment
        if: steps.context.outputs.is_pr == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: ${{ steps.generate_comment.outputs.comment_body }}
          reactions: 'eyes'

      - name: Summary
        run: |
          echo "## üìä Demo Generation Summary"
          echo "- Event: ${{ github.event_name }}"
          echo "- Demo changed: ${{ steps.check_changes.outputs.demo_changed }}"
          echo "- Is PR: ${{ steps.context.outputs.is_pr }}"
          echo "- Is release-please: ${{ steps.context.outputs.is_release_please }}"
