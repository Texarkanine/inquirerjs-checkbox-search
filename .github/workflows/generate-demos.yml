name: Generate Demo GIFs

on:
  pull_request:
    branches:
      - main
    paths: 
      - 'examples/**'
      - 'demos/**'
      - 'src/**'
      - '.github/workflows/generate-demos.yml'
  push:
    branches:
      - main
    paths: 
      - 'examples/**'
      - 'demos/**'
      - 'src/**'
      - '.github/workflows/generate-demos.yml'
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all demos'
        required: false
        default: 'false'

jobs:
  generate-demos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Create output directory
        run: mkdir -p docs/img
      
      - name: Backup existing demo (if exists)
        run: |
          if [ -f "docs/img/basic-demo.gif" ]; then
            cp docs/img/basic-demo.gif docs/img/basic-demo.gif.backup
            echo "existing_demo=true" >> $GITHUB_ENV
          else
            echo "existing_demo=false" >> $GITHUB_ENV
          fi
      
      - name: Generate demo GIF
        run: |
          # Set deterministic timestamp for consistent builds
          export SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)
          npm run demo:generate:basic
      
      - name: Check if demo changed
        id: check_changes
        run: |
          if [ "$existing_demo" = "true" ]; then
            if ! cmp -s docs/img/basic-demo.gif docs/img/basic-demo.gif.backup; then
              echo "demo_changed=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Demo GIF has changed"
            else
              echo "demo_changed=false" >> $GITHUB_OUTPUT
              echo "‚úÖ Demo GIF unchanged"
            fi
          else
            echo "demo_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ New demo GIF created"
          fi
      
      - name: Determine release-please context
        id: context
        run: |
          # Check commit message for release-please pattern (works for both PRs and commits)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            commit_message="${{ github.event.pull_request.title }}"
            echo "is_pr=true" >> $GITHUB_OUTPUT
          else
            commit_message="${{ github.event.head_commit.message }}"
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$commit_message" =~ ^chore\(main\): ]]; then
            echo "is_release_please=true" >> $GITHUB_OUTPUT
            echo "üîç Release-please detected: $commit_message"
          else
            echo "is_release_please=false" >> $GITHUB_OUTPUT
            echo "üîç Regular change detected: $commit_message"
          fi
      
      - name: Handle release-please with demo changes (fail build)
        if: steps.context.outputs.is_release_please == 'true' && steps.context.outputs.is_pr == 'true' && steps.check_changes.outputs.demo_changed == 'true'
        run: |
          echo "‚ùå ERROR: Demo GIF has changed in release-please PR!"
          echo "Demo changes should not be included in release PRs."
          echo "Please update the demo in a separate PR before the release."
          exit 1
      
      - name: Find existing demo comment
        if: steps.context.outputs.is_pr == 'true' && steps.context.outputs.is_release_please == 'false'
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'Demo GIF Changed'
      
      - name: Comment on demo changes
        if: steps.context.outputs.is_pr == 'true' && steps.context.outputs.is_release_please == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ${{ steps.check_changes.outputs.demo_changed == 'true' && '## ‚ö†Ô∏è Demo GIF Changed - Review Required
            
            This PR includes changes that affect the demo GIF output. 
            
            **Please review the generated demo to ensure it accurately represents the new functionality.**
            
            ### Changes Detected:
            - üé¨ `docs/img/basic-demo.gif` has been modified
            
            ### Next Steps:
            1. Review the demo GIF in the artifacts section below
            2. Ensure the demo accurately shows the intended functionality
            3. If the demo looks correct, this is expected and the PR can proceed
            4. If the demo is incorrect, please update the demo configuration in `demos/basic.tape`
            
            <details>
            <summary>üîç Technical Details</summary>
            
            The demo was generated from commit `${{ github.sha }}` using:
            - VHS tape file: `demos/basic.tape`
            - Example: `examples/basic.js`
            - Docker image: Built from `demos/Dockerfile`
            
            </details>' || '## ‚úÖ Demo GIF Reviewed and Stable
            
            The demo GIF is now stable and matches the current functionality.
            
            ### Status:
            - üé¨ `docs/img/basic-demo.gif` is up-to-date
            - ‚úÖ No further demo review required for this PR
            
            *This comment will be updated if demo changes are detected in future commits.*' }}
          reactions: ${{ steps.check_changes.outputs.demo_changed == 'true' && 'eyes' || 'hooray' }}
      
      - name: Upload demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: demo-gifs-${{ github.run_id }}
          path: docs/img/*.gif
          retention-days: 30
      
      - name: Commit demo changes (release commits only)
        if: steps.context.outputs.is_pr == 'false' && (steps.context.outputs.is_release_please == 'true' || github.event.inputs.force_regenerate == 'true') && steps.check_changes.outputs.demo_changed == 'true'
        run: |
          echo "üöÄ Committing demo changes for release..."
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Retry logic for potential conflicts
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            echo "Attempt $((retry_count + 1)) of $max_retries"
            
            # Fetch latest changes
            git fetch origin main
            git reset --hard origin/main
            
            # Regenerate demo to ensure we have latest
            npm run demo:generate:basic
            
            # Add and commit
            git add docs/img/*.gif
            
            if git diff --cached --quiet; then
              echo "No changes to commit after regeneration"
              break
            fi
            
            if git commit --no-gpg-sign -m "docs: Update demo GIFs [skip ci]"; then
              if git push; then
                echo "‚úÖ Successfully committed and pushed demo changes"
                break
              else
                echo "‚ö†Ô∏è Push failed, retrying..."
                retry_count=$((retry_count + 1))
                sleep $((retry_count * 2))  # Exponential backoff
              fi
            else
              echo "‚ùå Commit failed"
              break
            fi
          done
          
          if [ $retry_count -eq $max_retries ]; then
            echo "‚ùå Failed to commit after $max_retries attempts"
            exit 1
          fi
      
      - name: Summary
        run: |
          echo "## üìä Demo Generation Summary"
          echo "- Event: ${{ github.event_name }}"
          echo "- Demo changed: ${{ steps.check_changes.outputs.demo_changed }}"
          echo "- Is PR: ${{ steps.context.outputs.is_pr }}"
          echo "- Is release-please: ${{ steps.context.outputs.is_release_please }}" 