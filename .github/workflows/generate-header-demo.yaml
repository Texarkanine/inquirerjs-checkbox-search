name: Header Demo GIF

on:
  pull_request:
    branches:
      - main
    paths:
      - 'examples/**'
      - 'demos/**'
      - 'src/**'
      - '.github/workflows/generate-header-demo.yml'
  push:
    branches:
      - main
    paths:
      - 'examples/**'
      - 'demos/**'
      - 'src/**'
      - '.github/workflows/generate-header-demo.yml'
  workflow_dispatch:
    inputs:
      header_example:
        description: 'Which example to use as header.gif'
        required: false
        default: 'basic'
        type: choice
        options:
          - 'basic'
          # Add more as tape files are created
      commit_updates:
        description: 'Commit updates back to branch?'
        required: false
        default: 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-demo-gif
  cancel-in-progress: true

jobs:
  generate-header-demo:
    name: 'Generate'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine release-please context
        id: context
        run: |
          # Check commit message for release-please pattern (works for both PRs and commits)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            commit_message="${{ github.event.pull_request.title }}"
            echo "is_pr=true" >> $GITHUB_OUTPUT
          else
            commit_message="${{ github.event.head_commit.message }}"
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$commit_message" =~ ^chore\(main\): ]]; then
            echo "is_release_please=true" >> $GITHUB_OUTPUT
            echo "üîç Release-please detected: $commit_message"
          else
            echo "is_release_please=false" >> $GITHUB_OUTPUT
            echo "üîç Regular change detected: $commit_message"
          fi

      - name: Determine header example
        id: header
        run: |
          # Use input parameter if provided (workflow_dispatch), otherwise default to 'basic'
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            HEADER_EXAMPLE="${{ github.event.inputs.header_example }}"
          else
            HEADER_EXAMPLE="basic"
          fi

          echo "example=$HEADER_EXAMPLE" >> $GITHUB_OUTPUT
          echo "üéØ Will generate '$HEADER_EXAMPLE' demo as header.gif"

      - name: Generate demo GIF
        run: |
          # Set deterministic timestamp for consistent builds
          export SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)

          # Generate the chosen example
          EXAMPLE="${{ steps.header.outputs.example }}"
          echo "üé¨ Generating demo for: $EXAMPLE"
          npm run "demo:generate:$EXAMPLE"

      - name: Create header GIF from demo
        run: |
          EXAMPLE="${{ steps.header.outputs.example }}"
          SOURCE_FILE="docs/img/${EXAMPLE}-demo.gif"

          if [ -f "$SOURCE_FILE" ]; then
            cp "$SOURCE_FILE" docs/img/header.gif
            echo "‚úÖ Created header.gif from $SOURCE_FILE"
          else
            echo "‚ùå Source demo file not found: $SOURCE_FILE"
            exit 1
          fi

      - name: Upload demo artifacts (always upload regardless of changes)
        uses: actions/upload-artifact@v4
        with:
          name: demo-gifs-${{ github.run_id }}
          path: docs/img/*.gif
          retention-days: 30

      - name: Prepare demo preview content
        if: steps.context.outputs.is_pr == 'true'
        id: demo_preview
        run: |
          if [ -f "docs/img/header.gif" ]; then
            # Check file size (GitHub comments have limits)
            FILE_SIZE=$(stat -f%z "docs/img/header.gif" 2>/dev/null || stat -c%s "docs/img/header.gif")
            echo "Header GIF size: ${FILE_SIZE} bytes"
            
            if [ "$FILE_SIZE" -lt 500000 ]; then  # Less than ~500KB
              # Generate base64 data URL
              BASE64_DATA=$(base64 -w 0 "docs/img/header.gif")
              DATA_URL="data:image/gif;base64,${BASE64_DATA}"
              PREVIEW_CONTENT="![Header GIF Preview](${DATA_URL})"
              echo "‚úÖ Generated inline data URL (${FILE_SIZE} bytes)"
            else
              PREVIEW_CONTENT="üì¶ Header GIF available in [artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) (too large for inline display)"
              echo "‚ö†Ô∏è Header GIF too large for inline display (${FILE_SIZE} bytes)"
            fi
          else
            PREVIEW_CONTENT="‚ùå Header GIF generation failed"
            echo "‚ùå No header.gif file found"
          fi

          # Set the preview content using heredoc syntax
          echo "preview_content<<EOF" >> $GITHUB_OUTPUT
          echo "$PREVIEW_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if header GIF changed (using git)
        id: check_changes
        run: |
          # Use git to detect changes - much cleaner!
          if git diff --quiet docs/img/header.gif; then
            echo "demo_changed=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Header GIF unchanged"
          else
            echo "demo_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Header GIF has changed"
            
            # Show what changed for debugging
            echo "üìä Git status:"
            git status --porcelain docs/img/header.gif
          fi

      - name: Handle release-please with demo changes (fail build)
        if: steps.context.outputs.is_release_please == 'true' && steps.context.outputs.is_pr == 'true' && steps.check_changes.outputs.demo_changed == 'true'
        run: |
          echo "‚ùå ERROR: Demo GIF has changed in release-please PR!"
          echo "Demo changes should not be included in release PRs."
          echo "Please update the demo in a separate PR before the release."
          exit 1

      - name: Find existing demo comment
        if: steps.context.outputs.is_pr == 'true' && steps.context.outputs.is_release_please == 'false'
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'Header Demo GIF'

      - name: Comment on demo changes (changed)
        if: steps.context.outputs.is_pr == 'true' && steps.context.outputs.is_release_please == 'false' && steps.check_changes.outputs.demo_changed == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ## ‚ö†Ô∏è Header Demo GIF Changed - Review Required

            This PR includes changes that affect the demo GIF output. 

            **Please review the generated demo to ensure it accurately represents the library.**

            ### üé¨ Generated Demo Preview:

            ${{ steps.demo_preview.outputs.preview_content }}

            ### Changes Detected:
            - üé¨ `docs/img/header.gif` has been modified

            ### Next Steps:
            1. Review the demo GIF preview above
            2. Ensure the demo accurately shows the intended functionality
            3. If the demo looks correct, this is expected and the PR can proceed
            4. If the demo is incorrect, please update the demo configuration in `demos/${{ steps.header.outputs.example }}.tape`

            <details>
            <summary>üîç Technical Details</summary>

            The demo was generated from commit `${{ github.sha }}` using:
            - VHS tape file: [`demos/${{ steps.header.outputs.example }}.tape`](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/demos/${{ steps.header.outputs.example }}.tape)
            - Example: [`examples/${{ steps.header.outputs.example }}.js`](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/examples/${{ steps.header.outputs.example }}.js)
            - Docker image: Built from [`demos/Dockerfile`](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/demos/Dockerfile)

            </details>
          reactions: 'eyes'

      - name: Comment on demo changes (stable)
        if: steps.context.outputs.is_pr == 'true' && steps.context.outputs.is_release_please == 'false' && steps.check_changes.outputs.demo_changed == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ## ‚úÖ Header Demo GIF Reviewed and Stable

            The demo GIF is now stable and matches the current functionality.

            ### Status:
            - üé¨ `docs/img/header.gif` is up-to-date
            - ‚úÖ No further demo review required for this PR

            *This comment will be updated if demo changes are detected in future commits.*
          reactions: 'hooray'

      - name: Commit demo changes (normal commits to main only)
        if: |
          steps.context.outputs.is_pr == 'false' && 
          steps.check_changes.outputs.demo_changed == 'true' && 
          (
            steps.context.outputs.is_release_please == 'false' ||
            github.event.inputs.commit_updates == 'true'
          )
        run: |
          echo "üöÄ Committing demo changes..."

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Retry logic for potential conflicts
          max_retries=3
          retry_count=0

          while [ $retry_count -lt $max_retries ]; do
            echo "Attempt $((retry_count + 1)) of $max_retries"
            
            # Fetch latest changes
            git fetch origin main
            git reset --hard origin/main
            
            # Regenerate demo to ensure we have latest
            npm run demo:generate:basic
            
            # Add and commit
            git add docs/img/*.gif
            
            if git diff --cached --quiet; then
              echo "No changes to commit after regeneration"
              break
            fi
            
            if git commit --no-gpg-sign -m "docs: Update demo GIFs [skip ci]"; then
              if git push; then
                echo "‚úÖ Successfully committed and pushed demo changes"
                break
              else
                echo "‚ö†Ô∏è Push failed, retrying..."
                retry_count=$((retry_count + 1))
                sleep $((retry_count * 2))  # Exponential backoff
              fi
            else
              echo "‚ùå Commit failed"
              break
            fi
          done

          if [ $retry_count -eq $max_retries ]; then
            echo "‚ùå Failed to commit after $max_retries attempts"
            exit 1
          fi

      - name: Summary
        run: |
          echo "## üìä Demo Generation Summary"
          echo "- Event: ${{ github.event_name }}"
          echo "- Demo changed: ${{ steps.check_changes.outputs.demo_changed }}"
          echo "- Is PR: ${{ steps.context.outputs.is_pr }}"
          echo "- Is release-please: ${{ steps.context.outputs.is_release_please }}"
