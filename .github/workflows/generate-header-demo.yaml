name: Demo GIFs

on:
  pull_request:
    branches:
      - main
    paths:
      - 'examples/**'
      - 'demos/**'
      - 'src/**'
      - '.github/workflows/generate-demos.yaml'
  push:
    branches:
      - main
    paths:
      - 'examples/**'
      - 'demos/**'
      - 'src/**'
      - '.github/workflows/generate-demos.yaml'
  workflow_dispatch:
    inputs:
      commit_updates:
        description: 'Commit updates back to branch?'
        required: false
        default: 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-demo-gif
  cancel-in-progress: true

jobs:
  generate-demos:
    name: 'Generate'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine release-please context
        id: context
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          HEAD_MSG: ${{ github.event.head_commit.message }}
        run: |
          # Check commit message for release-please pattern (works for both PRs and commits)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            commit_message="$PR_TITLE"
            echo "is_pr=true" >> $GITHUB_OUTPUT
          else
            commit_message="$HEAD_MSG"
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$commit_message" =~ ^chore\(main\): ]]; then
            echo "is_release_please=true" >> $GITHUB_OUTPUT
            echo "üîç Release-please detected: $commit_message"
          else
            echo "is_release_please=false" >> $GITHUB_OUTPUT
            echo "üîç Regular change detected: $commit_message"
          fi

      - name: Generate all demo GIFs
        run: |
          # Set deterministic timestamp for consistent builds
          export SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)

          # Generate all demos
          echo "üé¨ Generating all demos..."
          npm run demo:generate:all

      - name: Upload demo artifacts (always upload regardless of changes)
        uses: actions/upload-artifact@v4
        with:
          name: demo-gifs-${{ github.run_id }}
          path: docs/img/*.gif
          retention-days: 30

      - name: Upload all demos to orphan branch and prepare preview
        if: steps.context.outputs.is_pr == 'true'
        id: demo_preview
        run: |
          echo "üîÑ Uploading all demo images to demo-images branch..."

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Save current state and get commit SHA
          CURRENT_SHA="${{ github.sha }}"
          CURRENT_BRANCH="${{ github.head_ref || github.ref_name }}"

          # Get the user's actual commit SHA (from the PR branch)
          USER_COMMIT_SHA=$(git rev-parse HEAD)

          # FIRST: Backup all generated demos BEFORE switching branches
          echo "üìÅ Backing up generated demos before branch switch..."
          mkdir -p /tmp/demo-backup
          echo "üîç Looking for *-demo.gif files in current directory:"
          ls -la docs/img/*-demo.gif 2>/dev/null || echo "üìÅ No *-demo.gif files found"

          if ls docs/img/*-demo.gif 1> /dev/null 2>&1; then
            cp docs/img/*-demo.gif /tmp/demo-backup/
            echo "‚úÖ Backed up $(ls docs/img/*-demo.gif | wc -l) demo files to /tmp/demo-backup/"
            echo "üìã Backed up files:"
            ls -la /tmp/demo-backup/
          else
            echo "‚ùå No demo files found to backup"
            exit 1
          fi

          git add . && git stash || true

          # Create or switch to demo-images orphan branch
          if git ls-remote --heads origin demo-images | grep -q demo-images; then
            echo "üìÅ Switching to existing demo-images branch"
            git fetch origin demo-images
            git checkout demo-images
          else
            echo "üìÅ Creating new demo-images orphan branch"
            git checkout --orphan demo-images
            git rm -rf . 2>/dev/null || true
            echo "# Demo Images Branch" > README.md
            echo "This branch contains demo images for PR previews." >> README.md
            git add README.md
            git commit -m "Initialize demo-images branch"
          fi

          # Copy all demo images with PR-specific naming from backup directory
          DEMO_IMAGES=""
          echo "üîç Processing backed up demo files:"

          for demo_file in /tmp/demo-backup/*-demo.gif; do
            if [ -f "$demo_file" ]; then
              demo_name=$(basename "$demo_file" | sed 's/-demo\.gif$//')
              PR_IMAGE="pr-${{ github.event.pull_request.number }}-${{ github.sha }}-${demo_name}.gif"
              
              cp "$demo_file" "$PR_IMAGE"
              echo "üì∑ Copied: $demo_file -> $PR_IMAGE"
              
              # Build the image URL
              IMAGE_URL="https://raw.githubusercontent.com/${{ github.repository }}/demo-images/$PR_IMAGE"
              DEMO_IMAGES="$DEMO_IMAGES $demo_name:$IMAGE_URL"
              echo "üîó Added to DEMO_IMAGES: $demo_name -> $IMAGE_URL"
            else
              echo "‚ö†Ô∏è File not found: $demo_file"
            fi
          done

          echo "üìã Final DEMO_IMAGES: '$DEMO_IMAGES'"

          # Add all PR-specific images
          git add pr-${{ github.event.pull_request.number }}-${{ github.sha }}-*.gif

          if git commit -m "Add demo images for PR #${{ github.event.pull_request.number }}"; then
            echo "üì∑ Added new demo images"
          else
            echo "üì∑ Demo images unchanged"
          fi

          # Push to demo-images branch
          if git push origin demo-images; then
            echo "‚úÖ Uploaded all demos to demo-images branch"
          else
            echo "‚ùå Failed to push to demo-images branch"
            DEMO_IMAGES="‚ùå Failed to upload demo images"
          fi

          # Switch back to original branch
          git checkout "$CURRENT_BRANCH"
          git stash pop 2>/dev/null || true

          # Store demo images info for comment generation
          echo "demo_images<<EOF" >> $GITHUB_OUTPUT
          echo "$DEMO_IMAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "user_commit_sha=$USER_COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Check which demos changed (using git)
        id: check_changes
        run: |
          # Check which demo files have changed
          CHANGED_DEMOS=""

          echo "üìä Checking for demo changes..."

          # Check each demo file
          for demo_file in docs/img/*-demo.gif; do
            if [ -f "$demo_file" ]; then
              demo_name=$(basename "$demo_file" | sed 's/-demo\.gif$//')
              
              # Debug: Check git status of this file
              echo "üîç Debugging $demo_name:"
              echo "  File path: $demo_file"
              echo "  Git status: $(git status --porcelain "$demo_file" || echo 'not in git status')"
              echo "  Git ls-files check: $(git ls-files --error-unmatch "$demo_file" 2>&1 || echo 'not tracked')"
              echo "  Git diff check: $(git diff --quiet "$demo_file" && echo 'no diff' || echo 'has diff')"
              
              # Check if file exists in git history (to handle new demos)
              if ! git ls-files --error-unmatch "$demo_file" >/dev/null 2>&1; then
                echo "üÜï New demo (not in git history): $demo_name"
                CHANGED_DEMOS="$CHANGED_DEMOS $demo_name"
              elif ! git diff --quiet "$demo_file"; then
                echo "‚úÖ Demo changed: $demo_name"
                CHANGED_DEMOS="$CHANGED_DEMOS $demo_name"
              else
                echo "üìç Demo unchanged: $demo_name"
              fi
            fi
          done

          # Set outputs
          echo "changed_demos=$CHANGED_DEMOS" >> $GITHUB_OUTPUT

          # Determine if any demo changed for legacy compatibility
          if [ -n "$CHANGED_DEMOS" ] ; then
            echo "demo_changed=true" >> $GITHUB_OUTPUT
            echo "üé¨ Overall: Demo changes detected"
          else
            echo "demo_changed=false" >> $GITHUB_OUTPUT
            echo "üé¨ Overall: No demo changes"
          fi

      - name: Handle release-please with demo changes (fail build)
        if: steps.context.outputs.is_release_please == 'true' && steps.context.outputs.is_pr == 'true' && steps.check_changes.outputs.demo_changed == 'true'
        run: |
          echo "‚ùå ERROR: Demo GIF has changed in release-please PR!"
          echo "Demo changes should not be included in release PRs."
          echo "Please update the demo in a separate PR before the release."
          exit 1

      - name: Find existing demo comment
        if: steps.context.outputs.is_pr == 'true' && steps.context.outputs.is_release_please == 'false'
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'Demo Preview - All Generated Demos'

      - name: Generate demo preview comment
        if: steps.context.outputs.is_pr == 'true' && steps.context.outputs.is_release_please == 'false'
        id: generate_comment
        run: |
          echo "üîÑ Generating demo preview comment..."

          # Get demo images info and changed demos
          DEMO_IMAGES="${{ steps.demo_preview.outputs.demo_images }}"
          CHANGED_DEMOS="${{ steps.check_changes.outputs.changed_demos }}"

          # Build comment body
          COMMENT_BODY="## üé¨ Demo Preview - All Generated Demos"

          if [ "${{ steps.check_changes.outputs.demo_changed }}" = "true" ]; then
            COMMENT_BODY="$COMMENT_BODY

            ‚ö†Ô∏è **Changes detected** - Please review the generated demos to ensure they accurately represent the library.
            "
          else
            COMMENT_BODY="$COMMENT_BODY

            ‚úÖ **Demos are stable** - No changes detected in demo output.
            "
          fi

          COMMENT_BODY="$COMMENT_BODY

          ### üìã All Generated Demos
          "

          # Parse demo images and create alphabetical list
          if [ "$DEMO_IMAGES" != "‚ùå Failed to upload demo images" ]; then
            SORTED_DEMOS=$(echo "$DEMO_IMAGES" | tr ' ' '\n' | grep ':' | cut -d':' -f1 | sort)
            
            for demo_name in $SORTED_DEMOS; do
              # Get the URL for this demo
              DEMO_URL=$(echo "$DEMO_IMAGES" | tr ' ' '\n' | grep "^${demo_name}:" | cut -d':' -f2-)
              
              # Check if this demo changed
              IS_CHANGED=false
              for changed_demo in $CHANGED_DEMOS; do
                if [ "$demo_name" = "$changed_demo" ]; then
                  IS_CHANGED=true
                  break
                fi
              done
              
              # Use <details open> for changed demos, <details> for unchanged
              if [ "$IS_CHANGED" = true ]; then
                # Check if this is a new demo or changed demo
                if ! git ls-files --error-unmatch "docs/img/${demo_name}-demo.gif" >/dev/null 2>&1; then
                  COMMENT_BODY="$COMMENT_BODY
          <details open>
          <summary>üÜï demos/${demo_name}.gif (NEW)</summary>

          ![${demo_name}-demo]($DEMO_URL)
          </details>
          "
                else
                  COMMENT_BODY="$COMMENT_BODY
          <details open>
          <summary>üî• demos/${demo_name}.gif (CHANGED)</summary>

          ![${demo_name}-demo]($DEMO_URL)
          </details>
          "
                fi
              else
                COMMENT_BODY="$COMMENT_BODY
          <details>
          <summary>üì∑ demos/${demo_name}.gif</summary>

          ![${demo_name}-demo]($DEMO_URL)
          </details>
          "
              fi
            done
          else
            COMMENT_BODY="$COMMENT_BODY
          ‚ùå Failed to upload demo images for preview.
          "
          fi

          COMMENT_BODY="$COMMENT_BODY

          ### üìã Commit Information
          - **Your commit SHA**: [\`${{ steps.demo_preview.outputs.user_commit_sha }}\`](https://github.com/${{ github.repository }}/commit/${{ steps.demo_preview.outputs.user_commit_sha }}) (from your branch)
          - **GitHub merge commit SHA**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) (GitHub's test merge)

          <details>
          <summary>üîç Technical Details</summary>

          The demos were generated from your branch commit [\`${{ steps.demo_preview.outputs.user_commit_sha }}\`](https://github.com/${{ github.repository }}/commit/${{ steps.demo_preview.outputs.user_commit_sha }}) using:
          - All demo tapes: [\`demos/\`](https://github.com/${{ github.repository }}/tree/${{ steps.demo_preview.outputs.user_commit_sha }}/demos)
          - Docker image: Built from [\`demos/Dockerfile\`](https://github.com/${{ github.repository }}/blob/${{ steps.demo_preview.outputs.user_commit_sha }}/demos/Dockerfile)

          **Note**: GitHub shows two different SHAs because it creates a temporary merge commit (\`${{ github.sha }}\`) to test what the PR would look like if merged, while your actual changes are in commit \`${{ steps.demo_preview.outputs.user_commit_sha }}\`.

          </details>
          "

          # Save comment body to output using heredoc
          echo "comment_body<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENT_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post/update demo preview comment
        if: steps.context.outputs.is_pr == 'true' && steps.context.outputs.is_release_please == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: ${{ steps.generate_comment.outputs.comment_body }}
          reactions: 'eyes'

      - name: Commit demo changes (normal commits to main only)
        if: |
          steps.context.outputs.is_pr == 'false' && 
          steps.check_changes.outputs.demo_changed == 'true' && 
          (
            steps.context.outputs.is_release_please == 'false' ||
            github.event.inputs.commit_updates == 'true'
          )
        run: |
          echo "üöÄ Committing demo changes..."

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Retry logic for potential conflicts
          max_retries=3
          retry_count=0

          while [ $retry_count -lt $max_retries ]; do
            echo "Attempt $((retry_count + 1)) of $max_retries"
            
            # Fetch latest changes
            git fetch origin main
            git reset --hard origin/main
            
            # Regenerate all demos to ensure we have latest
            npm run demo:generate:all
            
            # Add and commit
            git add docs/img/*.gif
            
            if git diff --cached --quiet; then
              echo "No changes to commit after regeneration"
              break
            fi
            
            if git commit --no-gpg-sign -m "docs: Update demo GIFs [skip ci]"; then
              if git push; then
                echo "‚úÖ Successfully committed and pushed demo changes"
                break
              else
                echo "‚ö†Ô∏è Push failed, retrying..."
                retry_count=$((retry_count + 1))
                sleep $((retry_count * 2))  # Exponential backoff
              fi
            else
              echo "‚ùå Commit failed"
              break
            fi
          done

          if [ $retry_count -eq $max_retries ]; then
            echo "‚ùå Failed to commit after $max_retries attempts"
            exit 1
          fi

      - name: Summary
        run: |
          echo "## üìä Demo Generation Summary"
          echo "- Event: ${{ github.event_name }}"
          echo "- Demo changed: ${{ steps.check_changes.outputs.demo_changed }}"
          echo "- Is PR: ${{ steps.context.outputs.is_pr }}"
          echo "- Is release-please: ${{ steps.context.outputs.is_release_please }}"
